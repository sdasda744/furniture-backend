// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  AUTHOR
}

enum Status {
  ACTIVE
  INACTIVE
  FREEZE
}

model User {
  id      Int      @id @default(autoincrement())
  firstName String? @db.VarChar(52)
  lastName String? @db.VarChar(52)
  phone String @unique @db.VarChar(15)
  password String
  email   String?   @unique @db.VarChar(52)
  role  Role @default(USER)
  status Status @default(ACTIVE)
  lastLogin DateTime?
  errorLoginCount Int @default(0) @db.SmallInt
  randomToken String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
  orders Order[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String
  body String
  image String @db.VarChar(255)
  authorID Int
  author User @relation(fields: [authorID], references: [id])
  categoryID Int
  cateogry Category @relation(fields: [categoryID], references: [id])
  typeID Int 
  type Type @relation(fields: [typeID], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String
  price Decimal @db.Decimal(10, 2)
  discount Decimal @db.Decimal(10, 2)
  rating Int @db.SmallInt
  inventory Int @db.SmallInt
  status Status @default(ACTIVE)
  categoryID Int
  cateogry Category @relation(fields: [categoryID], references: [id])
  typeID Int 
  type Type @relation(fields: [typeID], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images Image[]
  products ProductsOnOrder[]
}

model Image {
  id Int @id @default(autoincrement())
  productID Int
  product Product @relation(fields: [productID], references: [id])
  path String @db.VarChar(255)
}


model Category {
  id Int @id @default(autoincrement())
  name String @db.VarChar(52)
  posts Post[]
  products Product[]
}

model Type {
  id Int @id @default(autoincrement())
  name String @db.VarChar(52)
  posts Post[]
  products Product[]

}

model Order {
  id Int @id @default(autoincrement())
  code String @db.VarChar(15)
  totalPrice Decimal @db.Decimal(10, 2)
  userID Int
  user User @relation(fields: [userID], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order ProductsOnOrder[]
}

model Otp {
  id Int @id @default(autoincrement())
  phone String @unique @db.VarChar(15)
  otp String
  rememberToken String
  verifyToken String?
  count Int @default(0) @db.SmallInt
  error Int @default(0) @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductsOnOrder {
  id Int @id @default(autoincrement())
  price Decimal @db.Decimal(10, 2)
  quantity Int @db.SmallInt
  productID Int
  product Product @relation(fields: [productID], references: [id])
  orderID Int
  order Order @relation(fields: [orderID], references: [id])
}

model Tag {
  id Int @id @default(autoincrement())
  name String @db.VarChar(52)
  taggable Taggable[]
}

model Taggable {
  id Int @id @default(autoincrement())
  tagID Int
  tag Tag @relation(fields: [tagID], references: [id])
  type String @db.VarChar(7)
  typeID Int
}